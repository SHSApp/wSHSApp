@inject BrowserService Service

<Table Hoverable FixedHeader FixedHeaderTableHeight="@tableSize" FixedHeaderTableMaxHeight="@tableSize">
    <TableHeader ThemeContrast="ThemeContrast.Light">
        <TableRow>
            <TableHeaderCell>#</TableHeaderCell>
            <TableHeaderCell>Дата отправки</TableHeaderCell>
            <TableHeaderCell>Вид обращения</TableHeaderCell>
            <TableHeaderCell>Исходящий номер</TableHeaderCell>
            <TableHeaderCell>Куда направлено</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @for (int i = 0; i < PetitionInfo?.Count; i++)
        {
            var index = isReverse ? (PetitionInfo.Count - i).ToString() : (i + 1).ToString();
            var petitionItem = PetitionInfo[i];
            <TableRow @key="@index">
                <TableRowHeader>@index</TableRowHeader>
                <TableRowCell>@petitionItem.Date</TableRowCell>
                <TableRowCell>@petitionItem.Type</TableRowCell>
                <TableRowCell>@petitionItem.ID</TableRowCell>
                <TableRowCell>@petitionItem.Destination</TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>
<Footer OnCheckCallback="s => { PetitionInfo?.Reverse(); isReverse = s; }" Text="@("Всего элементов: " + PetitionInfo?.Count)" />

@code {
    [Parameter] public List<PetitionItem>? PetitionInfo { get; set; }

    private BrowserDimension size { get; set; }
    private string tableSize { get; set; }

    protected override async Task OnParametersSetAsync()
    {       
        await base.OnParametersSetAsync(); 
        size = await Service.GetDimensions();
        tableSize = (size.Height - 250).ToString() + "px";       
    }

    private bool isReverse = false;
}